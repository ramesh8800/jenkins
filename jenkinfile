tomcat
..................

node{
    stage ('source code checkout'){
        echo 'clone the source code'
        git credentialsId: 'git-jenkins', url: 'https://github.com/ramesh8800/java-tomcat-maven-example.git'
        echo 'checkout completed'
    }
    stage ('Build-maven'){
        echo 'Begining the code compile'
        def MVNHome = tool name: 'maven' , type: 'maven'
        def mvnCMD = "${MVNHome}/bin/mvn"
        sh "${mvnCMD} clean package"
        echo 'complete the code compile'
    }
    stage ('docker build'){
        echo 'build the image'
        sh 'docker build -t ramesh8800/tomcat:$BUILD_NUMBER .'
        echo 'build image successfully'
    }
    stage ('push docker image to dockerhub'){
        echo 'start image pushing'
        withCredentials([string(credentialsId: 'docker-pwd', variable: 'dockerhubpwd')]) {
            sh "docker login -u ramesh8800 -p ${dockerhubpwd}"   
        }
        sh 'docker push ramesh8800/tomcat:$BUILD_NUMBER'
        echo 'successfully push the image to dockergub'
    }
    stage ('run container on k8s server'){
        /*def dockerRun = 'docker run -p 8080:8080 -d --name my-app ramesh8800/tomcat:4.0'
        sshagent(['cicd']) {
            sh "ssh -o StrictHostKeyChecking=no ubuntu@172.31.33.151 ${dockerRun}"
        }
        //sh 'docker run -p 8080:8080 -d --name my-app ramesh8800/tomcat:2.0'
        //sh "ssh -o StrictHostKeyChecking=no -l ubuntu 172.31.81.17 uname -a ${dockerRun}"
        */
        kubernetesDeploy(
            configs: 'deployment.yml', 
            kubeconfigId: 'conf',
            enableConfigSubstitution: true)
        //sh "kubectl apply -f 'deployment.yml'"    
    }
    
    
}

..................
springboot-mongo
..........
node{
    stage ('source code checkout'){
        echo 'clone the source code'
        git credentialsId: 'git-jenkins', url: 'https://github.com/ramesh8800/spring-boot-mongo-docker.git'
        echo 'checkout completed'
    }
    stage ('Build-maven'){
        echo 'Begining the code compile'
        def MVNHome = tool name: 'maven' , type: 'maven'
        def mvnCMD = "${MVNHome}/bin/mvn"
        sh "${mvnCMD} clean package"
        echo 'complete the code compile'
    }
    stage ('docker build'){
        echo 'build the image'
        sh 'docker build -t ramesh8800/spring-boot-mongo:$BUILD_NUMBER .'
        echo 'build image successfully'
    }
    stage ('push docker image to dockerhub'){
        echo 'start image pushing'
        withCredentials([string(credentialsId: 'docker-pwd', variable: 'dockerhubpwd')]) {
            sh "docker login -u ramesh8800 -p ${dockerhubpwd}"   
        }
        sh 'docker push ramesh8800/spring-boot-mongo:$BUILD_NUMBER'
        echo 'successfully push the image to dockergub'
    }
    stage ('run container on k8s server'){
        /*def dockerRun = 'docker run -p 8080:8080 -d --name my-app ramesh8800/tomcat:4.0'
        sshagent(['cicd']) {
            sh "ssh -o StrictHostKeyChecking=no ubuntu@172.31.33.151 ${dockerRun}"
        }
        //sh 'docker run -p 8080:8080 -d --name my-app ramesh8800/tomcat:2.0'
        //sh "ssh -o StrictHostKeyChecking=no -l ubuntu 172.31.81.17 uname -a ${dockerRun}"
        */
        kubernetesDeploy(
            configs: 'springBootMongo.yml', 
            kubeconfigId: 'conf',
            enableConfigSubstitution: true)
        //sh "kubectl apply -f 'deployment.yml'"    
    }
    
    
}
...............
dotnetcore
..............
node{
    stage ('source code checkout'){
        echo 'clone the source code'
        git credentialsId: 'git-jenkins', url: 'https://github.com/ramesh8800/dotnetcore.git'
        echo 'checkout completed'
    }
    stage ('docker build'){
        echo 'build the image'
        sh 'docker build -t ramesh8800/dotnetcore:$BUILD_NUMBER .'
        echo 'build image successfully'
    }
    stage ('push docker image to dockerhub'){
        echo 'start image pushing'
        withCredentials([string(credentialsId: 'docker-pwd', variable: 'dockerhubpwd')]) {
            sh "docker login -u ramesh8800 -p ${dockerhubpwd}"   
        }
        sh 'docker push ramesh8800/dotnetcore:$BUILD_NUMBER'
        echo 'successfully push the image to dockergub'
    }
    stage ('run container on k8s server'){
        /*def dockerRun = 'docker run -p 8080:8080 -d --name my-app ramesh8800/tomcat:4.0'
        sshagent(['cicd']) {
            sh "ssh -o StrictHostKeyChecking=no ubuntu@172.31.33.151 ${dockerRun}"
        }
        //sh 'docker run -p 8080:8080 -d --name my-app ramesh8800/tomcat:2.0'
        //sh "ssh -o StrictHostKeyChecking=no -l ubuntu 172.31.81.17 uname -a ${dockerRun}"
        */
        kubernetesDeploy(
            configs: 'deployment.yaml', 
            kubeconfigId: 'conf',
            enableConfigSubstitution: true)
        //sh "kubectl apply -f 'deployment.yml'"    
    }
    
    
}

.......

